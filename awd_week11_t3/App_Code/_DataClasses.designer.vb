'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3603
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="csavio")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertstudent(instance As student)
    End Sub
  Partial Private Sub Updatestudent(instance As student)
    End Sub
  Partial Private Sub Deletestudent(instance As student)
    End Sub
  Partial Private Sub Insertstudentinfo(instance As studentinfo)
    End Sub
  Partial Private Sub Updatestudentinfo(instance As studentinfo)
    End Sub
  Partial Private Sub Deletestudentinfo(instance As studentinfo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ConnectionStringweek9").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property students() As System.Data.Linq.Table(Of student)
		Get
			Return Me.GetTable(Of student)
		End Get
	End Property
	
	Public ReadOnly Property studentinfos() As System.Data.Linq.Table(Of studentinfo)
		Get
			Return Me.GetTable(Of studentinfo)
		End Get
	End Property
End Class

<Table(Name:="dbo.students")>  _
Partial Public Class student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _StuID As Integer
	
	Private _studentinfos As EntityRef(Of studentinfo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnStuIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStuIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._studentinfos = CType(Nothing, EntityRef(Of studentinfo))
		OnCreated
	End Sub
	
	<Column(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StuID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property StuID() As Integer
		Get
			Return Me._StuID
		End Get
		Set
			If ((Me._StuID = value)  _
						= false) Then
				Me.OnStuIDChanging(value)
				Me.SendPropertyChanging
				Me._StuID = value
				Me.SendPropertyChanged("StuID")
				Me.OnStuIDChanged
			End If
		End Set
	End Property
	
	<Association(Name:="student_studentinfo", Storage:="_studentinfos", ThisKey:="StuID", OtherKey:="StuID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property studentinfos() As studentinfo
		Get
			Return Me._studentinfos.Entity
		End Get
		Set
			Dim previousValue As studentinfo = Me._studentinfos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._studentinfos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._studentinfos.Entity = Nothing
					previousValue.student = Nothing
				End If
				Me._studentinfos.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.student = Me
				End If
				Me.SendPropertyChanged("studentinfos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.studentinfos")>  _
Partial Public Class studentinfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StuID As Integer
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _test1 As System.Nullable(Of Decimal)
	
	Private _test2 As System.Nullable(Of Decimal)
	
	Private _test3 As System.Nullable(Of Decimal)
	
	Private _test4 As System.Nullable(Of Decimal)
	
	Private _test5 As System.Nullable(Of Decimal)
	
	Private _student As EntityRef(Of student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStuIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStuIDChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub Ontest1Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontest1Changed()
    End Sub
    Partial Private Sub Ontest2Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontest2Changed()
    End Sub
    Partial Private Sub Ontest3Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontest3Changed()
    End Sub
    Partial Private Sub Ontest4Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontest4Changed()
    End Sub
    Partial Private Sub Ontest5Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontest5Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._student = CType(Nothing, EntityRef(Of student))
		OnCreated
	End Sub
	
	<Column(Storage:="_StuID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property StuID() As Integer
		Get
			Return Me._StuID
		End Get
		Set
			If ((Me._StuID = value)  _
						= false) Then
				If Me._student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnStuIDChanging(value)
				Me.SendPropertyChanging
				Me._StuID = value
				Me.SendPropertyChanged("StuID")
				Me.OnStuIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_test1", DbType:="Decimal(18,0)")>  _
	Public Property test1() As System.Nullable(Of Decimal)
		Get
			Return Me._test1
		End Get
		Set
			If (Me._test1.Equals(value) = false) Then
				Me.Ontest1Changing(value)
				Me.SendPropertyChanging
				Me._test1 = value
				Me.SendPropertyChanged("test1")
				Me.Ontest1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_test2", DbType:="Decimal(18,0)")>  _
	Public Property test2() As System.Nullable(Of Decimal)
		Get
			Return Me._test2
		End Get
		Set
			If (Me._test2.Equals(value) = false) Then
				Me.Ontest2Changing(value)
				Me.SendPropertyChanging
				Me._test2 = value
				Me.SendPropertyChanged("test2")
				Me.Ontest2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_test3", DbType:="Decimal(18,0)")>  _
	Public Property test3() As System.Nullable(Of Decimal)
		Get
			Return Me._test3
		End Get
		Set
			If (Me._test3.Equals(value) = false) Then
				Me.Ontest3Changing(value)
				Me.SendPropertyChanging
				Me._test3 = value
				Me.SendPropertyChanged("test3")
				Me.Ontest3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_test4", DbType:="Decimal(18,0)")>  _
	Public Property test4() As System.Nullable(Of Decimal)
		Get
			Return Me._test4
		End Get
		Set
			If (Me._test4.Equals(value) = false) Then
				Me.Ontest4Changing(value)
				Me.SendPropertyChanging
				Me._test4 = value
				Me.SendPropertyChanged("test4")
				Me.Ontest4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_test5", DbType:="Decimal(18,0)")>  _
	Public Property test5() As System.Nullable(Of Decimal)
		Get
			Return Me._test5
		End Get
		Set
			If (Me._test5.Equals(value) = false) Then
				Me.Ontest5Changing(value)
				Me.SendPropertyChanging
				Me._test5 = value
				Me.SendPropertyChanged("test5")
				Me.Ontest5Changed
			End If
		End Set
	End Property
	
	<Association(Name:="student_studentinfo", Storage:="_student", ThisKey:="StuID", OtherKey:="StuID", IsForeignKey:=true)>  _
	Public Property student() As student
		Get
			Return Me._student.Entity
		End Get
		Set
			Dim previousValue As student = Me._student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._student.Entity = Nothing
					previousValue.studentinfos = Nothing
				End If
				Me._student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.studentinfos = Me
					Me._StuID = value.StuID
				Else
					Me._StuID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
